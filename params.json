{"name":"Br-cpf","body":"# BR::CPF ![Travis-ci status](https://secure.travis-ci.org/bbcoimbra/br-cpf.png?branch=master)\r\n\r\nLib implementada em C (gera uma lib compilada nativamente) que calcula e valida CPFs.\r\nRecomendada para Validar CPFs ou Gerar CPFs quando o sistema requer que sejam feitas mais de 1000 Validações/Gerações por segundo.\r\n\r\n## Instalação\r\n\r\n sudo gem install br-cpf\r\n\r\n## Exemplos\r\n\r\n### Usar\r\n\r\n```ruby\r\nrequire 'rubygems'\r\nrequire 'br/cpf'\r\n```\r\n\r\n### Validar\r\n\r\n```ruby\r\nBR::CPF.valid? '00000000191'\r\n #> true\r\n\r\nBR::CPF.valid? 12345678909\r\n #> true\r\n\r\nBR::CPF.valid? 12345678900\r\n #> false\r\n```\r\n\r\n### Gerar CPF\r\n\r\n```ruby\r\nraiz = 1\r\nBR::CPF.new(raiz).to_s\r\n #> '00000000191'\r\n```\r\n\r\n## Benchmark sobre uma implementação puro Ruby\r\nComparação de validação com a brcpfcnpj (Brazilian Rails)\r\n\r\n```bash\r\n$ cat benchmark.rb\r\n```\r\n\r\n```ruby\r\nrequire \"rubygems\"\r\nrequire \"br/cpf\"\r\nrequire \"brcpfcnpj\"\r\nrequire \"benchmark\"\r\n\r\n[1, 10, 100, 1000, 10_000, 100_000, 1_000_000].each do |n|\r\n\tputs \"Teste com n # #{n}\"\r\n\tBenchmark.bm do |x|\r\n\t\tx.report { n.times { BR::CPF.valid?(rand(999_999_999_99).to_s.rjust(11, '0')) } }\r\n\t\tx.report { n.times { Cpf.new(rand(999_999_999_99).to_s.rjust(11, '0')).valido? } }\r\n\tend\r\nend\r\n```\r\n\r\nResultados\r\n\r\n```\r\nTeste com n = 1\r\n  user     system      total        real\r\n  0.000000   0.000000   0.000000 (  0.000053)\r\n  0.000000   0.000000   0.000000 (  0.000243)\r\nTeste com n = 10\r\n  user     system      total        real\r\n  0.000000   0.000000   0.000000 (  0.000080)\r\n  0.000000   0.000000   0.000000 (  0.001187)\r\nTeste com n = 100\r\n  user     system      total        real\r\n  0.000000   0.000000   0.000000 (  0.002193)\r\n  0.020000   0.000000   0.020000 (  0.011373)\r\nTeste com n = 1000\r\n  user     system      total        real\r\n  0.020000   0.000000   0.020000 (  0.017329)\r\n  0.150000   0.000000   0.150000 (  0.169375)\r\nTeste com n = 10000\r\n  user     system      total        real\r\n  0.100000   0.000000   0.100000 (  0.094112)\r\n  1.490000   0.010000   1.500000 (  1.512164)\r\nTeste com n = 100000\r\n  user     system      total        real\r\n  0.850000   0.000000   0.850000 (  0.874577)\r\n  15.050000   0.010000  15.060000 ( 15.193196)\r\nTeste com n = 1000000\r\n  user     system      total        real\r\n  8.570000   0.010000   8.580000 (  8.631888)\r\n  150.620000   0.210000 150.830000 (152.158936)\r\n```\r\n\r\n## Desvantagens\r\nPor precisar compilar a extensão em C, acaba incompatível com sistemas que não tem um compilador em C (Windows).\r\n\r\nE quando o ritmo de comparação for menor que 1000 por segundo a diferença é pequena, por volta de de 0.15 segundos. Talvez o acumulo de dependência não valha a pena.\r\n\r\n## Copyright\r\n\r\nCopyright (c) 2010 Bruno Coimbra. Veja o arquivo LICENSE para mais detalhes.","tagline":"calcules and validates Brazilian CPF","google":"UA-17263530-3","note":"Don't delete this file! It's used internally to help with page regeneration."}